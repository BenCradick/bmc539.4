#!/bin/bash
#Ben Cradick
#cs 2750
#3-28-18

 declare -A usernames
 linecount=0

 function handleInterrupt() {
     rm usernames.txt name_frequency.txt collisions_report.txt temp34.txt temp56.txt temp35.txt sed*
     exit
 }
 #counts lines in username.txt so we know how many user + username combinations we're dealing with
 function getLineCount() {
    linecount=`wc -l usernames.txt | awk '{print $1}'`
 }
 function genNames() {
    #sets field seperator to "," and reorders rows that have it
    #removes leading spaces
    #removes common name suffixes VI and XI excluded because both are sometimes names VI short for violet, XI as in Xi Jinping
    #removes middle names
    #removes non alphabet characters
    #Capitalizes first name of each word
    awk 'BEGIN { FS=","} { print $2 " "  $1 }' "$1" |\
    sed "s/^[ \t]*//"  |\
    sed -r  's/\b(JR|SR|II|III|IV|V|VI|VII|VIII|X)\b//g' |\
    awk '{print $1 " " $NF}' |\
    sed 's/[^a-zA-Z ]//g' |\
    sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' >> usernames.txt
    
    #sed -i '/^$/d' usernames.txt
    
    #counts instances of each given name
    if [[ -f name_frequency.txt ]]; then
        rm name_frequency.txt
    fi

    awk '{names[$1" "$2]++;}END{for (i in names)
    print i," ", names[i]}' usernames.txt | column -tc2 >> name_frequency.txt
#gives number of columns in input file

getLineCount
if [[ ! -z $2 ]]; then
    i=$2
else 
i=1
fi


#go through chain of possible 
#names: first, last, first initial + last, first + last initial, last + first initial, first initial+ last+ number 01 - 99
#forewent using elif so that I could assign variables just in time instad of all up front.
while (($i <= $linecount)); do
    #username is first name
    username=`awk -v i="$i" 'NR == i {print tolower(substr($1,1,8)); exit}' usernames.txt`
    
    if [[  ! ${usernames["$username"]} -ge 1 ]]; then
        #initialize username to 1
        usernames["$username"]=1;
        #insert at the username at the current line number inplace
        sed -i "$i"'s/$/ '"$username"'/' usernames.txt
    else
        #increment count then reassign username this is repeated below
        ((usernames[$username]++))
        #grabs the last name truncated to 8 characters all usernames are truncated to 8 characters
        username=`awk -v i="$i" 'NR == i {print tolower(substr($2,1,8)); exit}' usernames.txt`
        if [[  ! ${usernames["$username"]} -ge 1 ]]; then
            usernames["$username"]=1;
            sed  -i "$i"'s/$/ '"$username"'/' usernames.txt 
        else
        ((usernames[$username]++))
        #first initlial + last name trunc ot 8 char
        username=`awk -v i="$i" 'NR == i {print tolower(substr($1,1,1) substr($2,1,7)); exit}' usernames.txt`
            if [[  ! ${usernames["$username"]} -ge 1 ]]; then
                usernames["$username"]=1;
                sed -i "$i"'s/$/ '"$username"'/' usernames.txt
                else
    
                ((usernames[$username]++))
                #username is first 7 letters of first name plus last initial
                username=`awk -v i="$i" 'NR == i {print tolower(substr($1,1,7) substr($2,1,1)); exit}' usernames.txt`
                if [[  ! ${usernames["$username"]} -ge 1 ]]; then
                    usernames["$username"]=1;
                    sed -i "$i"'s/$/ '"$username"'/' usernames.txt
                else
        
                    ((usernames[$username]++))
                    #username is first 7 letters of last + first initial
                    username=`awk -v i="$i" 'NR == i {print tolower(substr($2,1,7) substr($1,1,1)); exit}' usernames.txt`
                    if [[  ! ${usernames["$username"]} -ge 1 ]]; then
                        usernames["$username"]=1;
                        sed -i "$i"'s/$/ '"$username"'/' usernames.txt
                    else
                        #fast is the base format for usernames with numbers fast is 
                        fast=`awk -v i="$i" 'NR == i {print tolower(substr($1,1,1) substr($2,1,5)); exit}' usernames.txt`
                        j=1
                        while [[  ${usernames["$username"]} -ge 1 &&  $j -le 100 ]] ; do
                                ((usernames[$username]++))
                                k=`printf "%02d" $j`
                                username="$fast$k"
                    
                                ((j++))
                        done
                        #generates report if a user could not be resolved
                        if [[ $j -gt 100 ]]; then
                            awk -v i="$i" 'NR == i {print $1" "$2; exit}' usernames.txt >> unresolved_names.txt 
                        else
                        usernames["$username"]=1;
                        sed -i "$i"'s/$/ '"$username"'/' usernames.txt
                        fi
                    fi        
                fi
            fi    
        fi     
    fi
     ((i++))
done
column -tc2 usernames.txt >> temp_names_generated.txt
mv temp_names_generated.txt usernames.txt

if [[ -f collisions_report.txt ]]; then
    rm collisions_report.txt
fi
if [[ -f sed* ]]; then
    rm sed*
fi
#generates report on how many different names tried to claim same name at any point
for i in "${!usernames[@]}"; do
    ((usernames[$i]--))
    echo "$i ${usernames[$i]}"  >> collisions_report.txt
done

awk '$2 != 0' collisions_report.txt | column -tc2 >> temp56.txt
mv temp56.txt collisions_report.txt
}

#handles command line interrupts and deletes generated files as per  handleInterrupt()
trap handleInterrupt SIGINT SIGTERM
#checks argument format
if [[ ! -f "$1" &&  -z "$1" ]]; then
echo "no argument specified: Either follow generate_username with a file you want 
to turn into a list of names and usernames or enter -a to add a single user to usernames.txt, -m for custom name, or -s to add a set of users, use First Last format"
exit
fi
#cycle through all arguements so you can enter multiple names lists.
for ((arg=1; arg<=$#; arg++)); do
    if [[ -f "${!arg}" ]]; then
        if ([ ! -f usernames.txt ]); then
            genNames "${!arg}"
        elif [[ -f usernames.txt ]]; then
            getLineCount
            for i in $linecount; do
                username=`awk -v i="$i" 'NR == i {print $3; exit}' usernames.txt`
                if [[  ! ${usernames[$username]} -ge 1 ]]; then
                    usernames["$username"]=1
                else
                    ((usernames[$username]++))
                fi
            done
            #need to increment line count so we start appending the file at the correct row.
            ((linecount++))
            #all that was done above was prep the assoc array with the usernames that are already being used 
            #then we run like we're a normal file.
            genNames "${!arg}" "$linecount"
        fi
    # now we handle if the -a parameter is given, -a is a single name addendum
    elif [ "${1}" == "-a" ]; then
        name="$3,$2"
        echo "$name" > temp34.txt
        if [[ -f usernames.txt ]]; then
            getLineCount
        else
            linecount=1
        fi
            for (( i = 1; i <= $linecount; i++)); do
                if [[ -f usernames.txt ]]; then
                username=`awk -v i="$i" 'NR == i {print $3; exit}' usernames.txt`
                else
                genNames temp34.txt
                rm temp34.txt
                exit
                fi
                
                if [[  ! ${usernames[$username]} -ge 1 ]]; then
                    usernames["$username"]=1
                else
                    ((usernames[$username]++))
                fi
            done
            
            if [[ -f usernames.txt ]]; then
                ((linecount++))
                 genNames temp34.txt $linecount
                 rm temp34.txt
                 exit
            else
                genNames temp34.txt
                rm temp34.txt
                exit
            fi
    #handles the -s parameter which allows us to handle multiple usernames
    elif [ "${1}" == "-s" ]; then
        num=$#
        #number of arguemnts must be odd if -s + n first name last name combinations is the arguement.
        if [[ $((num%2)) -eq 0 ]]; then
            echo "incorrect number of arguments applied, should have an odd cardinality"
                exit
        
        elif [[ ! $((num%2)) -eq 0 ]]; then
            for ((arg=2; arg<=$#; arg+=2)); do
                arg2=$((arg+1))
                input="${!arg} ${!arg2}"
                echo $input > temp35.txt
                if [[ -f usernames.txt ]]; then
                getLineCount
                    for (( i = 1; i <= $linecount; i++)); do
                        username=`awk -v i="$i" 'NR == i {print $3; exit}' usernames.txt`
                        if [[  ! ${usernames[$username]} -ge 1 ]]; then
                            usernames["$username"]=1
                        else
                            ((usernames[$username]++))
                        fi
                    done
                    ((linecount++))
                    genNames temp35.txt $linecount
                    rm temp35.txt
                else
                genNames temp35.txt
                rm temp35.txt 
                fi
            done
            #temp  file from sed -i like to accumulate this removes them
            if [[ -f sed* ]]; then
                rm sed*
            fi
            exit
       fi
    elif [ "${1}" == "-m" ]; then
            if [[ ! -f usernames.txt ]]; then
                touch usernames.txt
            fi
            echo "Please enter the first name"
            read first
            echo "Please enter the last name"
            read last
            echo "Please enter the desired username"
            read custom_name
            
            if [[ -f usernames.txt ]]; then
                    getLineCount
                        for (( i = 1; i <= $linecount; i++)); do
                            username=`awk -v i="$i" 'NR == i {print $3; exit}' usernames.txt`
                            if [ -z $username ]; then
                            shutup=o
                            elif [[  ! ${usernames[$username]} -ge 1 ]]; then
                                usernames["$username"]=1
                            else
                                ((usernames[$username]++))
                            fi
                        done
                        while [[ ${usernames[$custom_name]} -ge 1 ]]; do
                            echo "Username already taken, please select a different one"
                            read custom_name
                            
                        done
                        
                        
                        
                        awk -v first=$first -v last=$last -v custom_name=$custom_name -v linecount=$linecount 'BEGIN{charges=1}
                        {
                            if ($1 == first && $2 == last && NF < 3 && charges == 1) {
                            print $1" "$2" "custom_name 
                            --charges }
                          else if (NR == linecount && charges == 1) {
                            NR == ++linecount
                            print first" "last" "custom_name} 
                          else if (NF == 3){
                            print $1" "$2" "$3}
                          else{
                              print $1" "$2
                          }}' usernames.txt | column -tc2 >> usernames_temp.txt
                        mv usernames_temp.txt usernames.txt
                        exit
            fi
    fi
done
